2:I[231,["231","static/chunks/231-553e389129e81e12.js","280","static/chunks/280-50bc6b1ed599f2b7.js","688","static/chunks/app/blogs/%5Bslug%5D/page-19970ca1740dc46e.js"],""]
3:I[2711,["231","static/chunks/231-553e389129e81e12.js","280","static/chunks/280-50bc6b1ed599f2b7.js","688","static/chunks/app/blogs/%5Bslug%5D/page-19970ca1740dc46e.js"],"default"]
5:I[9275,[],""]
7:I[1343,[],""]
8:I[4269,["231","static/chunks/231-553e389129e81e12.js","185","static/chunks/app/layout-dad4b4553953ff96.js"],"default"]
4:T3d68,<p>Bismillah, hari ini kita akan mempelajari PDO (PHP Data Objects).</p>
<p>Tetapi, seperti biasanya sebelum lanjut, yang perlu dipersiapkan adalah, kamu harus memahami beberapa perintah dasar sql, seperti Insert, Update, dll, pada database MariaDB. Jika belum kamu bisa belajar di channel Indonesia Belajar pada playlist <a href="https://youtube.com/playlist?list=PL2O3HdJI4voGs6CiEUPXwt1fhLLqu30E_">Tutorial Belajar Database MySQL | MariaDB</a>. Mengapa database MariaDB? karena pada tutorial ini kita akan menggunakan database MariaDB. Serta sangat di sarankan juga kamu untuk belajar dasar-dasar OOP (Object Oriented Programming) dengan bahasa pemrograman PHP. kamu bisa mempelajarinya di channel Web Programming Unpas pada playlist  <a href="https://youtube.com/playlist?list=PLFIM0718LjIWvxxll-6wLXrC_16h_Bl_p">OOP DASAR pada PHP</a>.</p>
<h2>Apa Itu PDO?</h2>
<p>PDO atau PHP Data Objects merupakan PHP ekstensi yang mendefiniskan ekstensi yang ringan, antarmuka yang konsisten untuk mengakses database di PHP.Intinya PDO adalah PHP ekstensi yang digunakan untuk mengakses database di PHP.</p>
<blockquote>
<p>Kamu tidak bisa menjalankan fungsi database apapun dengan hanya menggunakan ekstensi PDO, kamu harus menggunakan driver PDO database khusus untuk mengakses database server. Misalnya untuk database MariaDB kamu butuh MySQL PDO Driver, supaya bisa mengakses database MariaDB.</p>
</blockquote>
<p>Sebelum menggunakan PDO, pastikan bahwa ekstensi PDO sudah aktif, caranya buat satu file php (namanya bebas), lalu masukkan code:</p>
<pre><code class="language-php">&#x3C;?= phpinfo(); ?>
</code></pre>
<p>dan buka lewat browser. Setelah itu kamu bisa gunakan fitur pencarian yang ada di browser dengan menekan ctrl+f, cari dengan kata kunci <em>pdo</em>, pastikan kamu menemukan seperti pada gambar dibawah:
<img src="/posts/php-pdo/PHP-PDO-extension.png" alt="cek ekstensi PDO" width="974" height="585" loading="lazy" decoding="async"><!--rehype:width=974&height=585&loading=lazy&decoding=async-->
Pada gambar diatas, dibagian table PDO, pada kolom <em>enabled</em> tertera <code>mysql, pgsql</code> yang berarti bahwa PDO mendukung untuk koneksi ke database MariaDB dan PostgreSQL. Jika belum menemukan, kemungkinan ekstensi PDO nya belum aktif, kamu bisa googling untuk mencari cara mengaktifkannya.</p>
<p>Jika kamu menggunakan paket server XAMPP, kamu hanya perlu mencari baris code <code>;extension=php_pdo.dll</code> dan <code>;extension=php_pdo_mysql.dll</code> didalam file php.ini, lalu hapus <code>;</code> pada awal dari kedua baris code tersebut, jangan lupa untuk restart server php dan databasenya. Letak dari file php.ini di XAMPP biasanya ada di <code>/xampp/php/php.ini</code>. Sedangkan untuk kamu yang menggunakan paket server Laragon, caranya sangat mudah, buka Laragon > klik <em>Menu</em> > pilih <em>PHP</em> > pilih <em>Extentions</em> > dan klik pada ekstensi yang ingin diaktifkan.</p>
<p>Bagi kamu yang menggunakan os linux, terutama distro Debian, Ubuntu, dan Linux Mint serta tidak menggunakan paket server apapun seperti XAMPP atau Laragon, biasanya kamu harus menginstall ekstensi pdo_mysql untuk MariaDB, ikuti langkah berikut untuk menginstall ekstensinya:</p>
<ol>
<li>Update Daftar Package
<code>sudo apt update</code></li>
<li>Install Ekstensi
<code>sudo apt install php8.2-mysql</code></li>
</ol>
<p>Untuk versi php silahkan disesuaikan dengan versi php yang kamu gunakan, misalnya kamu menggunakan php7.4 maka <code>... php7.4-mysql</code>.</p>
<h2>Membuat Koneksi Ke Database MySQL</h2>
<p>Berikut contoh code untuk koneksi ke database dengan PDO:</p>
<pre><code class="language-php">&#x3C;?php
    $user = 'dbuser';
    $password = 'dbpass';
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $password);
?>
</code></pre>
<p>Untuk koneksi ke database dengan PDO kamu perlu membuat instansiasi dari class PDO, serta memasukkan beberapa argumen mengenai database yang digunakan, yang dikenal dengan DSN dan username, password (opsional). Berikut penjelasan rinci dari argumen tersebut:</p>
<ol>
<li>Data Source Name (DSN)
Bagian yang disebut DSN adalah <code>mysql:host=localhost;dbname=test</code>. DSN terbagi menjadi beberapa bagian, yang umum dipakai adalah DSN prefix, host, database name. DSN prefix pada contoh diatas adalah <code>mysql:</code>, host merupakan nama host tempat basis data berada, yang mana pada contoh yaitu <code>localhost</code>, database name adalah nama database kamu, pada contoh yaitu <code>test</code>. Penjelasan lebih lanjut bisa baca di <a href="https://www.php.net/manual/en/ref.pdo-mysql.connection.php">Manual PDO Mysql Connection</a>.</li>
<li>Username
Username merupakan username untuk koneksi ke database. Pada contoh, usernamenya yaitu <code>dbuser</code>.</li>
<li>Password
Password merupakan password untuk koneksi ke database. pada contoh, passwordnya yaitu <code>dbpass</code>.</li>
</ol>
<h2>Prepared Statement</h2>
<p>Prepared statement dapat dianggap sebagai template terkompilasi untuk SQL yang ingin dijalankan oleh aplikasi, yang dapat dikustomasisasi menggunakan parameter variabel. Begitulah pengertian dari website php.net. Bingung? oke, supaya lebih paham lihat contoh berikut!</p>
<pre><code class="language-sql">INSERT INTO users(username, password) VALUES(:username, :password)
</code></pre>
<p>Dan contoh detailnya adalah:</p>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';

    $stmt = $dbh->prepare("INSERT INTO users(username, password) VALUES(:username, :password)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $password);

    $stmt->execute();
?>
</code></pre>
<p>Pada kode diatas kita menggunakan prepared statement dengan <em>named placeholders</em>, yaitu dengan penggunaan placeholders <code>:username</code> dan <code>:password</code> pada fungsi <code>prepare()</code>. Fungsi <code>prepare()</code> berfungsi untuk menyiapkan sebuah SQL statement untuk di jalankan dan menghasilkan sebuah statement object.</p>
<p>Disana juga ada fungsi <code>bindParam()</code>, yang berfungsi untuk mengikat PHP variabel ke pada placeholders yang sesuai.
Argumen pertama yang dimasukkan pada fungsi <code>bindParam()</code>, adalah <em>parameter identifier</em>, yang mana itu berisi nama placeholders yang digunakan pada fungsi <code>prepare()</code>. Argumen keduanya adalah nama variabel.</p>
<p>Dan terakhir adalah fungsi <code>execute()</code> berfungsi untuk menjalankan prepared statement. Nantinya placeholders akan diganti dengan value dari variabel <code>$username</code> dan <code>$password</code>. Salah satu keuntungan menggunakan prepared statement ini adalah akan mencegah terjadinya serangan berbahaya seperti Injeksi SQL atau SQl Injection.</p>
<p>Selain dengan <em>named placeholders</em>, kamu juga bisa menggunakan <em>positional placeholders</em> atau bisa juga disebut <em>question mark placeholders</em>, seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';

    $stmt = $dbh->prepare("INSERT INTO users(username, password) VALUES(?, ?)");
    $stmt->bindParam(1, $username);
    $stmt->bindParam(2, $password);

    $stmt->execute();
?>
</code></pre>
<p>Perbedaanya dengan <em>named placeholders</em> adalah pada <em>positional placeholders</em> kita menggunakan tanda tanya (?) dan pada fungsi <code>bindParam()</code>, di argumen pertama kita menggunakan nomor index yang dimulai dari 1.</p>
<p>Jika tipe data dari value yang ingin kita masukkan kedalam database itu bertipe string semua, kita bisa tidak menggunakan fungsi <code>bindParam()</code>, yaitu dengan cara memasukkan langsung variabel sebagai array pada saat memanggil fungsi <code>execute()</code>, jadi seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';

    $stmt = $dbh->prepare("INSERT INTO users(username, password) VALUES(:username, :password)");
    //$stmt->bindParam(':username', $username);
    //$stmt->bindParam(':password', $password);

    $stmt->execute([':username' => $username, ':password' => $password]);
?>
</code></pre>
<p>Bagaimana dengan <em>positional placeholders</em>? jika menggunakan <em>named placeholders</em> maka harus menggunakan array asosiatif, sedangkan jika menggunakan <em>positional placeholders</em> maka menggunakan <em>indexed array</em>, seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';

    $stmt = $dbh->prepare("INSERT INTO users(username, password) VALUES(?, ?)");
    $stmt->execute([$username, $password]);
?>
</code></pre>
<blockquote>
<p>Perbedaan <em>indexed array</em> dan array asosiatif adalah tipe <em>key</em> yang digunakan, <em>indexed array</em> menggunakan <em>key</em> bertipe integer, sedangkan array asosiatif menggunakan <em>key</em> bertipe string</p>
</blockquote>
<p>Kapan kita harus menggunakan fungsi <code>bindParam()</code>? kita butuh menggunakan fungsi <code>bindparam()</code> ketika value yang harus dimasukkan itu bukan bertipe string, contohnya ketika kita butuh perintah SQl yang menggunakan perintah <code>limit</code>, mengapa? karena data yang dimasukkan harus bertipe integer, tidak bisa string, maka kita perlu menggunakan fungsi <code>bindParam()</code>. Pada fungsi <code>bindParam()</code> selain dua argument yang sebelumnya, yaitu, pertama string dari <em>named placeholders</em> atau nomor index dari <em>positional placeholders</em>, yang kedua adalah nama variabel-nya, dan yang ke tiga yaitu eksplisit tipe data untuk value yang akan kita masukkan, caranya adalah dengan menggunakan <code>PDO::PARAM_*constants</code>, seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $skip = 0;
    $max = 50;

    $stmt = $dbh->prepare("SELECT * FROM users LIMIT :skip, :max");
    $stmt->bindParam(':skip', $skip, PDO::PARAM_INT);
    $stmt->bindParam(':max', $max, PDO::PARAM_INT);

    $stmt->execute();

    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>
</code></pre>
<p>Pada code diatas, fungsi <code>fetchAll()</code> berfungsi untuk mengambil semua data hasil dari perintah <code>SELECT</code> dan <code>PDO::FETCH_ASSOC</code> digunakan agar data tersebut berbentuk array asosiatif. Untuk daftar rinci dari PDO Constants kamu bisa lihat di <a href="https://www.php.net/manual/en/pdo.constants.php">Manual PDO Constants</a>. Selain fungsi <code>fetchAll()</code> juga ada fungsi <code>fetch()</code>, yang berfungsi untuk mengambil satu data dari hasil perintah <code>SELECT</code>. Ketika kita memanggil fungsi <code>fetch()</code> untuk kedua kalinya, maka akan mengambil satu data berikutnya dan begitu seterusnya. Lebih rinci mengenai fungsi <code>fetch()</code> kamu bisa baca di <a href="https://www.php.net/manual/en/pdostatement.fetch.php">PDO fetch</a>.</p>
<p>Selain menggunakan fungsi <code>prepare()</code>, kamu juga bisa menggunakan fungsi <code>query()</code> atau <code>exec()</code>, seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $sql = 'SELECT * FROM users';
    foreach($dbh->query($sql) as $row) {
        echo $row['username'].'&#x3C;br>';
    }
?>
</code></pre>
<pre><code class="language-php">&#x3C;?php
    $count = $dbh->exec('DELETE FROM users');
    echo $count . 'baris telah dihapus';
?>
</code></pre>
<blockquote>
<p>Praktik terbaik dalam penggunaan <code>prepare()</code> adalah ketika perintah SQL tersebut membutuhkan data dari luar, seperti dari input user. Biasanya kita membutuhkan data dari luar ketika kita ingin memasukkan data ke database, ataupun ketika ingin menghapus suatu data berdasarkan id tertentu dan lain-lain.</p>
</blockquote>
<blockquote>
<p>Sedangkan <code>query()</code> digunakan ketika perintah SQL tersebut tidak membutuhkan data dari luar, misalnya perintah untuk menampilkan semua user seperti di atas. Adapun <code>exec()</code> hampir sama seperti <code>query()</code>, tetapi fungsi <code>exec()</code> tidak mengembalikan data hasil dari perintah <code>SELECT</code>, tetapi mengembalikan jumlah baris yang terkena dampak dari perintah SQL, sehingga lebih cocok untuk perintah seperti <code>DELETE</code>, <code>UPDATE</code> dan <code>CREATE</code>.</p>
</blockquote>
<p>Sebagai tambahan, berikut adalah contoh code CRUD (Create Read Update Delete) dengan PDO dan Prepared Statement:</p>
<ul>
<li>Create : memasukkan data ke dalam database</li>
</ul>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';

    $stmt = $dbh->prepare("INSERT INTO users(username, password) VALUES(:username, :password)");
    $stmt->execute([':username' => $username, ':password' => $password]);
?>
</code></pre>
<ul>
<li>Read : mengambil data dari database</li>
</ul>
<pre><code class="language-php">&#x3C;?php
    $stmt = $dbh->prepare("SELECT * FROM users WHERE username != :username");
    $stmt->execute([':username' => 'reza']);

    foreach($stmt as $u) {
        echo $u['username'].'&#x3C;br>';
    }
?>
</code></pre>
<ul>
<li>Update : mengubah data di database</li>
</ul>
<pre><code class="language-php">&#x3C;?php
    $username = 'rezauser';
    $password = 'rezapass';
    $id = '123';

    $stmt = $dbh->prepare("UPDATE users SET username = :username, password = :password WHERE id = :id");
    $stmt->execute([':username' => $username, ':password' => $password, ':id' => $id]);
?>
</code></pre>
<ul>
<li>Delete : menghapus data dari database</li>
</ul>
<pre><code class="language-php">&#x3C;?php
    $id = '123';
    $stmt = $dbh->prepare("DELETE FROM users WHERE id = :id");
    $stmt->execute([':id' => $id]);
?>
</code></pre>
<h2>Penanganan Error Koneksi</h2>
<p>Pada bagian terakhir ini kita akan sedikit membahas mengenai penanganan error koneksi pada saat mengakses database dengan PDO. Untuk menangani error yang dihasilkan, kamu bisa menggunakan blok try catch, seperti:</p>
<pre><code class="language-php">&#x3C;?php
    $user = 'dbuser';
    $password = 'dbpass';

    try {
        $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $password);

        $stmt = $dbh->prepare("SELECT * FROM users LIMIT :skip :max");
        $stmt->bindParam(':skip', 0, PDO::PARAM_INT);
        $stmt->bindParam(':max', 50, PDO::PARAM_INT);

        $stmt->execute();
    } catch (PDOException $e) {
        echo "Error!: ".$e->getMessage().'&#x3C;br>';
        die;
    }
?>
</code></pre>
<p>Jika terjadi error koneksi apa saja, maka sebuah object PDOException akan di buat, karena itu pada bagian <code>catch()</code> kita memberitahu untuk menangkap object PDOException tersebut, sehingga errornya bisa ditangani didalam block catch. Lalu kita tampilkan error tersebut dengan sedikit di ubah formatnya didalam blok catch. Format error bebas kamu tentukan sesuka hati. Untuk lebih jelas mengenai penggunaan blok try catch untuk exeception handling, seperti diatas, kamu bisa googling saja, atau kamu bisa memperlajarinya di <a href="https://jagongoding.com/web/php/menengah/penanganan-exception/">Jago Ngoding: Penanganan Exception</a>.</p>
<p>Oke, terima kasih buat kamu yang sudah membaca, semoga bermanfaat. Jika ada yang ingin ditanyakan atau ada saran silahkan kirim email ke <a href="mailto:fikkri.reza@gmail.com">fikkri.reza@gmail.com</a>. Jangan lupa follow Linkedin <a href="https://www.linkedin.com/in/reza-sariful-fikri">in/reza-sariful-fikri</a> ku atau bisa juga di Facebook <a href="https://web.facebook.com/reza.sariful.fikri">reza.sariful.fikri</a> untuk mendapatkan tulisan terbaru.</p>
<p>Kamu bisa juga berdonasi melalui <a href="https://saweria.co/rezafikkri">Saweria</a> untuk mendukung saya.</p>
<h3>Referensi:</h3>
<p><a href="https://www.php.net/manual/en/book.pdo.php">PHP: PDO - Manual</a></p>6:["slug","pdo-php-data-objects-ekstensi-php-untuk-mengakses-database","d"]
0:["FFQzVmkapWoOufERshp2m",[[["",{"children":["blogs",{"children":[["slug","pdo-php-data-objects-ekstensi-php-untuk-mengakses-database","d"],{"children":["__PAGE__?{\"slug\":\"pdo-php-data-objects-ekstensi-php-untuk-mengakses-database\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blogs",{"children":[["slug","pdo-php-data-objects-ekstensi-php-untuk-mengakses-database","d"],{"children":["__PAGE__",{},[["$L1",["$","article",null,{"className":"mt-24","children":[["$","time",null,{"className":"text-gray-600 inline-block","children":"07 Desember 2023"}],["$","h1",null,{"className":"text-5xl font-bold mt-2 text-gray-900","children":"PDO (PHP Data Objects): Ekstensi PHP untuk mengakses database"}],["$","div",null,{"className":"flex flex-wrap gap-1 mt-6","children":[["$","$L2","cdc80207-597b-4fb7-b572-53b68c9f1a78",{"href":"/blogs/topic/PHP","className":"no-underline text-xs bg-white border border-gray-500 hover:border-ajwa-blue px-2 py-1 rounded-lg","children":"PHP"}],["$","$L2","597f5651-dfe2-4aad-81aa-7c8b090ff468",{"href":"/blogs/topic/Database","className":"no-underline text-xs bg-white border border-gray-500 hover:border-ajwa-blue px-2 py-1 rounded-lg","children":"Database"}]]}],["$","$L3",null,{"post":{"contentHTML":"$4","id":"e2b7af83-c3b4-4e3f-95fb-013cd05d4614","title":"PDO (PHP Data Objects): Ekstensi PHP untuk mengakses database","date":"2023-12-07T08:13:00.750Z","topics":["cdc80207-597b-4fb7-b572-53b68c9f1a78","597f5651-dfe2-4aad-81aa-7c8b090ff468"],"slug":"pdo-php-data-objects-ekstensi-php-untuk-mengakses-database","ogImage":"/posts/php-pdo/php-pdo.png","excerpt":"PDO atau PHP Data Objects merupakan PHP ekstensi yang mendefiniskan ekstensi yang ringan, antarmuka yang konsisten untuk mengakses database di PHP.\n"}}],null]}]],null],null]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blogs","children","$6","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f16eaa9e44b97d3f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blogs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"id","className":"__variable_741ce5 __variable_df7ce8","children":["$","body",null,{"className":"h-screen bg-gray-50 font-roboto","children":[["$","div",null,{"className":"sm:text-center py-3 px-4 bg-gray-100 text-gray-700","children":[["$","span",null,{"className":"me-1","children":"Free Palestine 🇵🇸"}],["$","$L2",null,{"href":"https://inh.or.id/","rel":"noopener noreferrer","target":"_blank","className":"group no-underline hover:text-ajwa-blue inline-block","children":[["$","span",null,{"className":"me-1","children":"Kirim Hadiah Terbaik Melalui INH"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"13","height":"13","className":"inline-block align-baseline stroke-gray-700 group-hover:stroke-ajwa-blue","viewBox":"0 0 16 16","children":[["$","path",null,{"fillRule":"evenodd","d":"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}],["$","path",null,{"fillRule":"evenodd","d":"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}]]}]]}]]}],["$","div",null,{"className":"max-w-5xl mx-auto px-4 sm:px-8","children":["$","header",null,{"className":"pt-6 flex flex-col items-start sm:flex-row sm:justify-between content-center sm:items-center","children":[["$","$L2",null,{"className":"no-underline mb-2 sm:mb-0","href":"/","children":["$","img",null,{"src":"/Reza logo.svg","width":35,"height":35,"alt":"Reza logo","loading":"lazy","decoding":"async"}]}],["$","$L8",null,{}]]}]}],["$","div",null,{"className":"max-w-4xl mx-auto px-4 sm:px-8","children":["$","main",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],["$","div",null,{"className":"max-w-5xl mx-auto px-4 sm:px-8","children":["$","footer",null,{"className":"mt-20 md:mt-32 pt-4 pb-5 text-sm text-gray-500","children":[["$","div",null,{"className":"flex flex-col sm:flex-row justify-between mb-4 sm:mb-3 sm:mb-4 gap-3","children":[["$","ul",null,{"className":"flex flex-col sm:flex-row gap-3 sm:gap-4","children":[["$","li",null,{"children":["$","$L2",null,{"href":"https://github.com/rezafikkri","children":"Github"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"https://www.linkedin.com/in/reza-sariful-fikri-9356ab16a/","children":"Linkedin"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"https://twitter.com/fikkrireza","children":"Twitter"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"https://web.facebook.com/reza.sariful.fikri","children":"Facebook"}]}]]}],["$","ul",null,{"className":"flex flex-col sm:flex-row gap-3 sm:gap-4","children":[["$","li",null,{"children":["$","$L2",null,{"href":"/blogs","children":"Blog"}]}],["$","li",null,{"children":["$","$L2",null,{"href":"/projects","children":"Projek"}]}]]}]]}],["$","div",null,{"className":"flex justify-between flex-col sm:flex-row gap-2 sm:gap-5","children":[["$","p",null,{"className":"basis-2/4","children":"Dibuat dengan Next.js dan Tailwind CSS"}],["$","p",null,{"className":"basis-2/4 sm:text-end","children":"©2024 Reza Sariful Fikri 🇮🇩🇵🇸"}]]}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f82899f8cec7858f.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/796ad535a0728bbf.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L9"]]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"PDO (PHP Data Objects): Ekstensi PHP untuk mengakses database - Reza Sariful Fikri"}],["$","meta","3",{"name":"description","content":"PDO atau PHP Data Objects merupakan PHP ekstensi yang mendefiniskan ekstensi yang ringan, antarmuka yang konsisten untuk mengakses database di PHP.\n"}],["$","meta","4",{"name":"google-site-verification","content":"fLcDg3KFF-m2xDnm4TGsRylXksSQTGGfLq6FqSe8cUs"}],["$","meta","5",{"property":"og:title","content":"PDO (PHP Data Objects): Ekstensi PHP untuk mengakses database"}],["$","meta","6",{"property":"og:description","content":"PDO atau PHP Data Objects merupakan PHP ekstensi yang mendefiniskan ekstensi yang ringan, antarmuka yang konsisten untuk mengakses database di PHP.\n"}],["$","meta","7",{"property":"og:url","content":"https://rezafikkri.github.io/blogs/pdo-php-data-objects-ekstensi-php-untuk-mengakses-database"}],["$","meta","8",{"property":"og:image","content":"https://rezafikkri.github.io/posts/php-pdo/php-pdo.png"}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"PDO (PHP Data Objects): Ekstensi PHP untuk mengakses database"}],["$","meta","12",{"name":"twitter:description","content":"PDO atau PHP Data Objects merupakan PHP ekstensi yang mendefiniskan ekstensi yang ringan, antarmuka yang konsisten untuk mengakses database di PHP.\n"}],["$","meta","13",{"name":"twitter:image","content":"https://rezafikkri.github.io/posts/php-pdo/php-pdo.png"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","15",{"name":"next-size-adjust"}]]
1:null
